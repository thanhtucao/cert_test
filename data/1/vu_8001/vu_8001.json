{
  "Impact": "Local users can kill processes other than their own", 
  "CVSS_SecurityRequirementsIR": "", 
  "CVSS_EnvironmentalVector": "", 
  "Title": "fsetown+SIGURG", 
  "DateFirstPublished": "", 
  "CVSS_AccessVector": "", 
  "CAM_ScoreCurrentWidelyKnown": 0, 
  "IDNumber": "8001", 
  "SystemsAffectedPreamble": "", 
  "CVSS_SecurityRequirementsCR": "", 
  "CVSS_Authenication": "", 
  "CVSS_BaseScore": "", 
  "CAM_EaseOfExploitation": "0", 
  "IPProtocol": "", 
  "CERTAdvisory": "", 
  "CVSS_CollateralDamagePotential": "", 
  "Revision": "1", 
  "CVEIDs": "", 
  "VRDA_D1_DirectReport": "", 
  "CAM_WidelyKnown": "0", 
  "CAM_Population": "0", 
  "Description": "It appears that A/UX has a relatively common kernel bug, one which was\ndiscovered initially (and patched) in Linux, but also one which appears\nto also be evident in other UNIXes as well, such as Solaris and IRIX.\n\nThe bug is an exploitation of the fcntl(F_SETOWN) call and sending SIGURG\nto processes. It's possible to use the fcntl(F_SETOWN) call to select\n_any_ process, whether you own it or not, to receive the SIGURG signal\nand which point you can initiate a SIGURG signal (simply by socket\nmanipulation and 'send(.... MSG_OOB)'). Unless this signal is caught or\nignored by the process, the signal will cause the process to be terminated!\n\nThe problem appears 2-fold:\n\no The fcntl() module isn't checking that the process-ID in the call\n== the process's own PID, or that the process-group in the call (if\nthe parameter is negative) is the same as the process-group of\nthe process. (\"UNIX System V Network Programming\", Stephan Rago,\npage 328-329)\n\no That the SIGURG signal isn't ignored by default, which, as I understand\nit, is what the latest UNIXes do and the \"expected\" behavior\n(\"UNIX System V Network Programming\", Stephan Rago, page 324)\n\nMy code review shows it's a bug in the original BSD kernel code (and still\nin 4.4).  As indicated, a lot of people have copied this code (and the bug).\nI don't know when Linux fixed this problem.\n\nA/UX provides a BSD-style signal environment, under which SIGURG _is_\nignored by default. Only processes doing System V signal handling\n(the default) are subject to this problem. Most of the A/UX daemons\nare built to operate in the BSD signal environment; \"weak\" daemons\nthat we've already identified are: init, cron, nfsd, and biod. Init\nis particularly problematic, since once it is dead, process slots\nstart filling up with zombies and soon you can't run any more processes....\n\nIn general, this attack seems to be relatively moderate in level of risk.\nIt is a denial-of-service attack which requires the user to have an\naccount on the system under attack. I don't see how this could be used to\ngain root access.\n\nIt's fairly trivial (see below) to create a wrapper that ignores SIGURG\nand then execs the program you want to protect; if it handles SIGURG,\nthis shouldn't have an adverse effect. As a special case, if no arguments\nare provided, my wrapper execs /etc/init. This avoids having to modify\nthe kernel to start a different program as the precursor process; this\nis probably A/UX specific.\n\nThe problem, of course, is determining which processes to protect.\nIf you \"wrap\" init, then all processes which don't invoke\nsignal(SIGURG, SIG_DFL) are protected, since they'll inherit the\nsetting from their parent or other ancestor.", 
  "CVSS_AccessComplexity": "", 
  "CVSS_SecurityRequirementsAR": "", 
  "Resolution": "", 
  "Author": "This document was written by CN=Lawrence R Rogers/O=CERT.", 
  "CAM_Exploitation": "0", 
  "DateLastUpdated": "1998-05-21T11:40:31+00:00", 
  "CVSS_IntegrityImpact": "", 
  "VRDA_D1_Population": "", 
  "CVSS_TemporalVector": "", 
  "CVSS_ReportConfidence": "", 
  "CVSS_ConfidentialityImpact": "", 
  "CVSS_BaseVector": "", 
  "VulnerabilityCount": 1, 
  "CVSS_Exploitability": "", 
  "ThanksAndCredit": "", 
  "US-CERTTechnicalAlert": "", 
  "CAM_ScoreCurrentWidelyKnownExploited": 0, 
  "CVSS_TemporalScore": "", 
  "VRDA_D1_Impact": "", 
  "CVSS_TargetDistribution": "", 
  "CAM_InternetInfrastructure": "0", 
  "CVSS_RemediationLevel": "", 
  "Workarounds": "Suggestion is to wrap init so that SIGURG is ignored. If not SIGURG then it would be something else.", 
  "ID": "VU#8001", 
  "CVSS_AvailabilityImpact": "", 
  "CAM_ScoreCurrent": 0, 
  "Overview": "", 
  "CAM_Impact": "0", 
  "DatePublic": "", 
  "DateCreated": "1998-05-21T11:41:06-04:00", 
  "References": "", 
  "Keywords": [
    "fcntl", 
    "F_SETOWN", 
    "signals", 
    "SIGURG", 
    "SIGIO"
  ], 
  "CVSS_EnvironmentalScore": "", 
  "CAM_AttackerAccessRequired": "0"
}