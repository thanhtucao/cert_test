{
  "Impact": "Java applets can communicate with hosts other than the host from where\nthe applet was loaded.", 
  "CVSS_SecurityRequirementsIR": "", 
  "CVSS_EnvironmentalVector": "", 
  "Title": "connections-to-anywhere", 
  "DateFirstPublished": "", 
  "CVSS_AccessVector": "", 
  "CAM_ScoreCurrentWidelyKnown": 9.384, 
  "IDNumber": "3501", 
  "SystemsAffectedPreamble": "", 
  "CVSS_SecurityRequirementsCR": "", 
  "CVSS_Authenication": "", 
  "CVSS_BaseScore": "", 
  "CAM_EaseOfExploitation": "5", 
  "IPProtocol": "", 
  "CERTAdvisory": "CA-1996-05", 
  "CVSS_CollateralDamagePotential": "", 
  "Revision": 1, 
  "CVEIDs": "", 
  "VRDA_D1_DirectReport": "", 
  "CAM_WidelyKnown": "1", 
  "CAM_Population": "16", 
  "Description": "(see http://www.cs.princeton.edu/~ddean/JavaDNSAttack.html)\n\nThe fromHost information comes from the class loader that is\nparsing information from the URL that loaded the applet.\n\nThe toHost information comes from whatever the applet says.\n\nWhen gethostbyname is applied to the toAddress and the fromAddress, then\nfor the toAddress to be valid, all that has to happen is that the\naddress of fromHost be contained in the list of addresses for toHost.\nWhen that test passes with the code that is contained in the\nSun/Netscape AppletSecurity class, then the connection is made to the\nprimary address for toHost as returned by gethostbyname.  Ergo, the data\ncan go somewhere other than intended given a bugged DNS.\n\nThe following is from:\n\nhttp://www.cs.princeton.edu/~ddean/java/dns-scenario.html\n\nJava Security: DNS Attack Scenario\n\nScenario\n\nThe victim has two machines, stooge.victim.org (IP address 10.10.10.1) and\ntarget.victim.org (IP address 10.10.10.2). The attacker has a machine\nwww.attacker.org (IP address 172.16.16.16).\n\nThe victim has a firewall that prevents machines outside the victim's\norganization from making unauthorized network connections to any of the victim's\nmachines. The prevents the attacker from\nlaunching a direct attack on the victim's machines. The victim's security\ndepends on the firewall.\n\nWhat the attacker does\n\nThe attacker creates a bogus machine name \"bogus.attacker.org\" and creates a DNS\nmapping from bogus.attacker.org to the pair of IP addresses (10.10.10.2,\n172.16.16.16).\n\nThe attacker also writes an innocent-looking Java applet and attaches it to a\nweb page installed on www.attacker.org.\n\nTriggering the attack\n\nThe victim, running his web brower on stooge.victim.org, innocently visits a web\npage on www.attacker.org. This causes the attacker's applet to be loaded into\nthe victim's browser, and to start\nrunning.\n\nThe applet performs some innocent function that is visible to the victim. It\nalso silently attacks the victim's machines.\n\nFirst, the applet asks to create a network connection to bogus.attacker.org. The\nJava system looks up the address \"bogus.attacker.org,\" getting the IP address\npair (10.10.10.2, 172.16.16.16).\nThe Java system compares this address pair to the address of the machine that\nthe applet came from (172.16.16.16). Since the two have the address 172.16.16.16\nin common, Java allows the\nconnection. However, the Java system actually connects to the first address on\nthe list, namely 10.10.10.2 (target.victim.org).\n\nThe attacker's applet now has a network connection to target.victim.org. It can\nproceed to attack the defenses of target.victim.org, using any one of several\ncommon network security\nweaknesses.\n\nA more sophisticated version of the attack allows the attacker's applet to\nsystematically attack all of the machines in the victim's organization. The\nattacking applet can tell the attacker's DNS\nserver which IP addresses to return, by encoding the IP addresses into the DNS\nname that is looked up. For example, the applet could look up\nbogus-10-10-10-2--172-16-16-16.attacker.org if it wanted the DNS server to\nreturn the address pair given above.\n\nWhy the attack works\n\nThe key to the success of the attack is that the victim's firewall is helpless\nto prevent it. The firewall is supposed to protect the victim by preventing\nmachines outside the firewall from opening\narbitrary network connections to the victim's machines inside the firewall. In\nthis attack, however, the dangerous network connections come from one of the\nvictim's own machines, so the\nfirewall is useless.\n\nIn effect, the attacker causes the victim's web browser to attack the victim's\nown machines.\n\nUsing SATAN\n\nSince the attacking applet can make network connections back to attacker.org,\nthe applet can operate under the direction of a \"real attacker\" that is running\nback in attacker.org. For instance,\na variant of the notorious security-probing program \"Satan\" could be used to\ndirect the attack.\n\nThird-party attacks\n\nIf the attacker can compromise a machine at third-party.org, it can still carry\nout the attack on victim.org. The attacker plants his applet on a web server on\nwww.third-party.org. When the\nvictim loads a web page from www.third-party.org, the attacking applet is loaded\ninto the victim's machine. The applet can still use the DNS server at\nattacker.org to fool Java into allowing\narbitrary connections. As above, the applet can connect to any desired machine\non the internet, so it can attack the victim's machines, and it can operate\nunder the direction of a program or\nperson somewhere in attacker.org.\n\nA Web virus\n\nThe third-party version of the attack can be used to create a virus. The virus\nwould be attached to an innocent-looking Web applet. When the applet was run by\nsome person, the applet\nwould attack machines in that person's organization. If it penetrated one of\nthose machines, it would append the attacking code to any web pages it found on\nthe penetrated machines. The\nvirus could spread from web-server to web-server in this manner.\n\nNote: all of the machine names and IP addresses used in the example are\nfictitious. As far as we can tell, there are no real machines with these\naddresses connected to the Internet.\n\nDrew Dean, Ed Felten, and Dan Wallach; Department of Computer Science,\nPrinceton University; Last modified: Thu Feb 22 22:09:46 EST 1996\n\nSee also http://www.aztech.net/~steve/java/.", 
  "CVSS_AccessComplexity": "", 
  "CVSS_SecurityRequirementsAR": "", 
  "Resolution": "", 
  "Author": "This document was written by CN=Lawrence R Rogers/O=CERT.", 
  "CAM_Exploitation": "10", 
  "DateLastUpdated": "1999-02-15T09:16:18-05:00", 
  "CVSS_IntegrityImpact": "", 
  "VRDA_D1_Population": "", 
  "CVSS_TemporalVector": "", 
  "CVSS_ReportConfidence": "", 
  "CVSS_ConfidentialityImpact": "", 
  "CVSS_BaseVector": "", 
  "VulnerabilityCount": 1, 
  "CVSS_Exploitability": "", 
  "ThanksAndCredit": "", 
  "US-CERTTechnicalAlert": "", 
  "CAM_ScoreCurrentWidelyKnownExploited": 11.424, 
  "CVSS_TemporalScore": "", 
  "VRDA_D1_Impact": "", 
  "CVSS_TargetDistribution": "", 
  "CAM_InternetInfrastructure": "16", 
  "CVSS_RemediationLevel": "", 
  "Workarounds": "Disable Java from Netscape's \"Security Preferences\" dialog. An HTTP proxy server could also disable Java applets by refusing to\nfetch Java \".class\" files.", 
  "ID": "VU#3501", 
  "CVSS_AvailabilityImpact": "", 
  "CAM_ScoreCurrent": 5.508, 
  "Overview": "", 
  "CAM_Impact": "8", 
  "DatePublic": "", 
  "DateCreated": "1998-05-21T11:36:40-04:00", 
  "References": "", 
  "Keywords": [
    "java", 
    "dns"
  ], 
  "CVSS_EnvironmentalScore": "", 
  "CAM_AttackerAccessRequired": "17"
}